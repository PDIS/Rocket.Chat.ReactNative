# This file is modified from gitlab android template

# This file is a template, and might need editing before it works on your project.
# Read more about this script on this blog post https://about.gitlab.com/2018/10/24/setting-up-gitlab-ci-for-android-projects/, by Jason Lenny
# If you are interested in using Android with FastLane for publishing take a look at the Android-Fastlane template.

stages:
  - pre-build
  - build
  - translation

lintDebug:
  image: node:lts
  interruptible: true
  stage: pre-build
  before_script:
    # Install package
    - npx yarn
  script:
    - npm run lint

jest:
  image: node:lts
  interruptible: true
  stage: pre-build
  before_script:
    # Install package
    - npx yarn
  script:
    - npx yarn jest

Fetch Translation:
  stage: translation
  when: manual
  only:
    - pdis.rocket.chat
  image: debian:stable-slim
  variables:
    GIT_STRATEGY: clone
  before_script:
    - apt update -qy
    - apt install -y curl jq git
    - git config --global user.email 'automator@gitlab.pdis.dev'
    - git config --global user.name 'CrowdinTranslation'
    - git checkout "${CI_COMMIT_REF_NAME}"
    - git remote set-url origin $( echo ${CI_REPOSITORY_URL} | sed -E "s/gitlab-ci-token:[^@]+/gitlab-ci-token:${GITLAB_TOKEN}/" )
  script:
    - |
      ZH_TW_FILE=$(curl https://crowdin.com/api/v2/projects/${projectId}/translations/builds/files/${fileId}\
                  -X POST \
                  -H 'Content-Type: application/json' \
                  -H "Authorization: Bearer ${PersonalToken}" \
                  --data '{"targetLanguageId": "zh-TW"}'\
          | jq -r '.data.url')
      curl $ZH_TW_FILE -o app/i18n/locales/zh-TW.json
      cp app/i18n/locales/zh-TW.json app/i18n/locales/zh-Hant-TW.json
      if [ "$(git diff --exit-code)" ]; then
        git add app/i18n/locales/zh-TW.json
        git add app/i18n/locales/zh-Hant-TW.json
        echo '[Auto] Fetch translation string from Crowdin' | git commit -F -
        git push origin "${CI_COMMIT_REF_NAME}" -o ci.skip
      else
        echo 'there is no changes'
      fi


androidReleaseBuild:
  only:
    - /.*-pdis-rc$/i
  image: openjdk:8-jdk
  interruptible: true
  stage: build
  variables:
    # ANDROID_COMPILE_SDK is the version of Android you're compiling with.
    # It should match compileSdkVersion.
    ANDROID_COMPILE_SDK: "29"

    # ANDROID_BUILD_TOOLS is the version of the Android build tools you are using.
    # It should match buildToolsVersion.
    ANDROID_BUILD_TOOLS: "29.0.3"

    # It's what version of the command line tools we're going to download from the official site.
    # Official Site-> https://developer.android.com/studio/index.html
    # There, look down below at the cli tools only, sdk tools package is of format:
    #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
    # when the script was last modified for latest compileSdkVersion, it was which is written down below
    ANDROID_SDK_TOOLS: "7583922"

  # Packages installation before running script
  before_script:
    - apt-get --quiet update --yes
    - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1

    # Setup path as android_home for moving/exporting the downloaded sdk into it
    - export ANDROID_HOME="${PWD}/android-home"
    # Create a new directory at specified location
    - install -d $ANDROID_HOME
    # Here we are installing androidSDK tools from official source,
    # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
    # after that unzipping those tools and
    # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
    - wget --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
    # move to the archive at ANDROID_HOME
    - pushd $ANDROID_HOME
    - unzip -d cmdline-tools cmdline-tools.zip
    - popd
    - export PATH=$PATH:${ANDROID_HOME}/cmdline-tools/cmdline-tools/bin/

    # Nothing fancy here, just checking sdkManager version
    - sdkmanager --version

    # use yes to accept all licenses
    - yes | sdkmanager --sdk_root=${ANDROID_HOME} --licenses || true
    - sdkmanager --sdk_root=${ANDROID_HOME} "platforms;android-${ANDROID_COMPILE_SDK}"
    - sdkmanager --sdk_root=${ANDROID_HOME} "platform-tools"
    - sdkmanager --sdk_root=${ANDROID_HOME} "build-tools;${ANDROID_BUILD_TOOLS}"

    # Not necessary, but just for surity
    - chmod +x android/gradlew

    ######### Setting For React Native #########
    # NVM
    - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
    - source $HOME/.nvm/nvm.sh
    # Node
    - nvm install lts/erbium
    - node --version
    # Install package
    - npx yarn

  script:
    ######### Recovery keystore #########
    - openssl aes-256-cbc -K $KEYSTORE_ENCRYPT_AES_KEY -iv $KEYSTORE_ENCRYPT_AES_IV -in android-keystore.enc -out android/app/dev.pdis.rocketchat.keystore -d
    - mkdir -p ~/.gradle
    - echo -e "APPLICATION_ID=dev.pdis.rocketchat" > ~/.gradle/gradle.properties
    - echo -e "KEYSTORE=$KEYSTORE_FILE" >> ~/.gradle/gradle.properties
    - echo -e "KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD" >> ~/.gradle/gradle.properties
    - echo -e "KEY_ALIAS=$KEYSTORE_ALIAS" >> ~/.gradle/gradle.properties
    - echo -e "KEY_PASSWORD=$KEYSTORE_ALIAS_PASSWORD" >> ~/.gradle/gradle.properties
    - echo -e "BugsnagAPIKey=$BUGSNAG_API_KEY" >> ~/.gradle/gradle.properties
    - echo -e "VERSIONCODE=$CI_PIPELINE_IID" >> ~/.gradle/gradle.properties
    ## Build
    - cd android && ./gradlew assemblePdisPlayRelease
  artifacts:
    paths:
      - android/app/build/outputs/
